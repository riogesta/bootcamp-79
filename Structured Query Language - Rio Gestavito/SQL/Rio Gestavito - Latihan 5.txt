1. Untuk setiap pesanan, hitung subtotal untuk setiap pesanan (diidentifikasi oleh OrderID)

jawaban :
SELECT order_id, 
       CAST(SUM((quantity * unit_price) - (quantity * unit_price * discount)) AS DECIMAL(10,2)) AS subtotal
FROM order_details
GROUP BY order_id
ORDER BY order_id;


2. kita mencari penjualan berdasarkan tahun dari 1996-12-24 hingga 1997-09-30

jawaban :
SELECT 
    O.shipped_date, 
    O.order_id,
    CAST(SUM((D.quantity * D.unit_price) - (D.quantity * D.unit_price * D.discount)) AS DECIMAL(10,2)) AS subtotal, 
    EXTRACT(YEAR FROM O.shipped_date) AS year
FROM order_details D
INNER JOIN orders O ON D.order_id = O.order_id
WHERE O.shipped_date BETWEEN '1996-12-24' AND '1997-08-30'
GROUP BY O.shipped_date, O.order_id
ORDER BY O.shipped_date;



3. kita hanya diminta untuk menampilkan list informasi product berurut berdasarkan alphabet

jawaban : 
Select *
From products
Order By product_name



4. kita menampilkan data product_id dan product_name dari tabel product dan urutkan berdasarkan nama productnya.

jawaban :
Select product_id, product_name
From products
Order By product_name


5. kita diminta membuat query untuk menghitung harga jual untuk setiap pesanan setelah diskon diterapkan.

jawaban :
SELECT 
    d.order_id,
    p.product_name, 
    d.unit_price, 
    d.quantity, 
    d.discount,
    CAST(SUM((d.quantity * d.unit_price) - (d.quantity * d.unit_price * d.discount)) AS DECIMAL(10,2)) AS ExtendedPrice
FROM order_details d
INNER JOIN products p ON d.product_id = p.product_id
GROUP BY d.order_id, p.product_name, d.unit_price, d.quantity, d.discount
ORDER BY d.order_id;



6. kita diminta menampilkan list total product terjual productsales digabungkan berdasarkan category dari product tersebut dan diurutkan bedasarkan category dan nama product.

jawaban :
SELECT 
    c.category_id,
    c.category_name,
    p.product_name,
    CAST(SUM((d.quantity * d.unit_price) - (d.quantity * d.unit_price * d.discount)) AS DECIMAL(10,2)) AS ProductSales
FROM categories c
INNER JOIN products p ON c.category_id = p.category_id
INNER JOIN order_details d ON p.product_id = d.product_id
INNER JOIN orders o ON o.order_id = d.order_id
WHERE EXTRACT(YEAR FROM o.order_date) = 1997
GROUP BY c.category_id, c.category_name, p.product_name
ORDER BY c.category_name, p.product_name;



7. kita diminta menampilkan list 10 product termahal berdasarkan unit price nya

jawaban :
Select 
    product_name as Ten_Most_Expensive_Product,
    unit_price as UnitPrice
From products
Order By unit_price desc
limit 10


8. kita diminta menampilkan informasi semua product berdasarkan category dari product - product tersebut. dimana ada ketentuan informasi discontinued yang ditambahkan.

jawaban :
Select 
    c.category_name, 
    p.product_name, 
    p.quantity_per_unit, 
    p.units_in_stock,
    case
        when p.discontinued = 1 then 'y'
        when p.discontinued = 0 then 'n'
    end as discontinued
From products p
Inner Join categories c on p.category_id = c.category_id
Order By c.category_name, p.product_name

9. kita diminta menampilkan seluruh customer dan supplier berdasarkan kota asalnya, disini kita harus menggabungkan 2 query, dan memberikan keterangan nama yang sebagai customer dan supplier.

jawaban :
SELECT 
    city, 
    company_name, 
    contact_name,
    CASE
        WHEN customer_id IS NULL THEN 'Suppliers'
        WHEN customer_id IS NOT NULL THEN 'Customers'
    END AS "Relationship"
FROM customers

UNION ALL

SELECT 
    city, 
    company_name, 
    contact_name,
    CASE
        WHEN supplier_id IS NULL THEN 'Customers'
        WHEN supplier_id IS NOT NULL THEN 'Suppliers'
    END AS "Relationship"
FROM suppliers

ORDER BY city;



10. kita diminta menampilkan data sale_amount dari setiap employee yang diurutkan berdasarkan negara asal employee tersebut.

jawaban :
SELECT 
    e.country, 
    e.last_name, 
    e.first_name, 
    o.shipped_date, 
    o.order_id,
    CAST(SUM((d.quantity * d.unit_price) - (d.quantity * d.unit_price * d.discount)) 
    AS DECIMAL(16,2)) AS "Sale_Amount"
FROM 
    employees e
INNER JOIN 
    orders o ON e.employee_id = o.employee_id
INNER JOIN 
    order_details d ON o.order_id = d.order_id
WHERE 
    EXTRACT(YEAR FROM o.shipped_date) = 1997
GROUP BY 
    e.country, e.last_name, e.first_name, o.shipped_date, o.order_id
ORDER BY 
    e.country, e.last_name, e.first_name, o.shipped_date;



11. kita diminta menampilkan data product dan rata-rata dari unit_price tiap product

jawaban :
SELECT 
    product_name, 
    unit_price
FROM 
    products
WHERE 
    unit_price > (
        SELECT AVG(total)
        FROM (
            SELECT 
                product_name, 
                SUM(unit_price) AS total
            FROM 
                products
            GROUP BY 
                product_name
        ) AS average
    )
ORDER BY 
    unit_price;



12. kita diminta mengelompokkan semua data product beserta kategorynya berdasarkan kuartal. Jumlah penjualan tiap kuartal dari product, kuartal diambil dari shipped_date dari setiap productnya.

jawaban :
SELECT 
    c.category_name, 
    p.product_name,
    CAST(SUM((d.quantity * d.unit_price) - (d.quantity * d.unit_price * d.discount)) AS DECIMAL(12,2)) AS Productsales,
    CONCAT('Qtr', ' ', EXTRACT(QUARTER FROM o.shipped_date)) AS ShippedQuarter
FROM 
    products p
JOIN 
    categories c ON p.category_id = c.category_id
JOIN 
    order_details d ON p.product_id = d.product_id
JOIN 
    orders o ON d.order_id = o.order_id
WHERE 
    EXTRACT(YEAR FROM o.shipped_date) = 1997
GROUP BY 
    ShippedQuarter, c.category_name, p.product_name
ORDER BY 
    c.category_name, p.product_name;



13. kita diminta menampilkan categorysales dari category utama product pada tahun 1997. Category sales didapat dari quantity * unit_price - discount.

jawaban :
SELECT 
    c.category_name,
    CAST(SUM((d.quantity * d.unit_price) - (d.quantity * d.unit_price * d.discount)) AS DECIMAL(12,2)) AS CategorySales
FROM 
    categories c
INNER JOIN 
    products p ON c.category_id = p.category_id
INNER JOIN 
    order_details d ON p.product_id = d.product_id
INNER JOIN 
    orders o ON o.order_id = d.order_id
WHERE 
    EXTRACT(YEAR FROM o.order_date) = 1997
GROUP BY 
    c.category_name
ORDER BY 
    c.category_name;



14. kita diminta menampilkan banyaknya order dari setiap produk berdasarkan kuartal yang diambil dari order_date pada tahun 1997. Urut dan gabung berdasarkan product_name, company_name, dan order_date. Jika pada kuartal tersebut tidak ada order product maka tuliskan jumlahnya 0.

jawaban :
SELECT 
    p.product_name, 
    c.company_name, 
    EXTRACT(YEAR FROM o.order_date) AS OrderYear,
    SUM(CASE WHEN EXTRACT(QUARTER FROM o.order_date) = 1 THEN (d.quantity * d.unit_price - d.quantity * d.unit_price * d.discount) ELSE 0 END) AS "Qtr 1",
    SUM(CASE WHEN EXTRACT(QUARTER FROM o.order_date) = 2 THEN (d.quantity * d.unit_price - d.quantity * d.unit_price * d.discount) ELSE 0 END) AS "Qtr 2",
    SUM(CASE WHEN EXTRACT(QUARTER FROM o.order_date) = 3 THEN (d.quantity * d.unit_price - d.quantity * d.unit_price * d.discount) ELSE 0 END) AS "Qtr 3",
    SUM(CASE WHEN EXTRACT(QUARTER FROM o.order_date) = 4 THEN (d.quantity * d.unit_price - d.quantity * d.unit_price * d.discount) ELSE 0 END) AS "Qtr 4"
FROM 
    customers c
INNER JOIN 
    orders o ON o.customer_id = c.customer_id
INNER JOIN 
    order_details d ON d.order_id = o.order_id
INNER JOIN 
    products p ON p.product_id = d.product_id
WHERE 
    EXTRACT(YEAR FROM o.order_date) = 1997
GROUP BY 
    p.product_name, c.company_name, o.order_date;


15. kita diminta menampilkan banyaknya unit_in_stock dari setiap kategori berdasarkan dari benua pemasok. Keterangan benua diambil dari negara dari pemasok product. Urut dan gabung berdasarkan product_category dan benuanya.

jawaban :
SELECT 
    c.category_name AS product_category,
    CASE
        WHEN s.country IN ('USA', 'Brazil', 'Canada') THEN 'America'
        WHEN s.country IN ('Australia', 'Japan', 'Singapore') THEN 'Asia Pacific'
        ELSE 'Europe'
    END AS supplier_continent,
    SUM(p.units_in_stock) AS unit_in_stock
FROM 
    categories c
INNER JOIN 
    products p ON c.category_id = p.category_id
INNER JOIN 
    suppliers s ON p.supplier_id = s.supplier_id
GROUP BY 
    c.category_name, supplier_continent
ORDER BY 
    c.category_name;



